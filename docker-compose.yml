networks:
  mynetwork:

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    restart: always
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - mynetwork

  kafka:
    image: wurstmeister/kafka
    container_name: broker
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      DOCKER_API_VERSION: 1.22
      KAFKA_ADVERTISED_HOST_NAME: broker
    depends_on:
      zookeeper:
        condition: service_started
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "broker:9092"]
      interval: 10s
      retries: 5
      start_period: 20s

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
      start_period: 5s

  websocket-server:
    build: .
    container_name: websocket-server
    restart: always
    ports:
      - "8081:8080"
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKER=broker:9092
      - DB_URI=${DB_URI}
    networks:
      - mynetwork
